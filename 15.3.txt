2) Explain about speed transfer in sqoop


Speed transfer is also called as performance tuning.
The best tuning practices involves
Batch
Split-by and boundary-query
Direct
Fetch-size
Num-mapper
These arguments are used to optimise the functioning

Inserting Data in Batches:
Specifies that you can group the related SQL statements into a batch when you export data.
The JDBC interface exposes an API for doing batches in a prepared statement with multiple sets of values. With the --batch parameter, Sqoop can take advantage of this. This API is present in all JDBC drivers because it is required by the JDBC interface.
Enable JDBC batching using the --batch parameter.
sqoop export  --connect <<JDBC URL>>  --username <<SQOOP_USER_NAME>>  --password <<SQOOP_PASSWORD>>   --table <<TABLE_NAME>>  --export-dir <<FOLDER_URI>>  --batch

Custom Boundary Queries:
Specifies the range of values that you can import. You can use boundary-query if you do not get the desired results by using the split-by argument alone.
When you configure the boundary-query argument, you must specify the min(id) and max(id) along with the table name. If you do not configure the argument, Sqoop runs the following query.
sqoop import   --connect
<<JDBC URL>>   --username
<<SQOOP_USER_NAME>>   --password
<<SQOOP_PASSWORD>>   --query <<QUERY>>
  --split-by <<ID>>
  --target-dir <<TARGET_DIR_URI>>
 --boundary-query "select min(<<ID>>), max(<<ID>>)
from <<TABLE>>"

Importing Data Directly into Hive:
Specifies the direct import fast path when you import data from RDBMS.
Rather than using the JDBC interface for transferring data, the direct mode delegates the job of transferring data to the native utilities provided by the database vendor. In the case of MySQL, the mysqldump and mysqlimport will be used for retrieving data from the database server or moving data back. There are several limitations that come with this faster import. For one, not all databases have available native utilities. This mode is not available for every supported database. Out of the box, Sqoop has direct support only for MySQL and PostgreSQL.
sqoop import   --connect
<<JDBC URL>>   --username
<<SQOOP_USER_NAME>>   --password
<<SQOOP_PASSWORD>>  --table
<<TABLE_NAME>>   --direct

Importing Data using Fetch-size:
Specifies the number of entries that Sqoop can import at a time.
Use the following syntax:
--fetch-size=<n>
Where <n> represents the number of entries that Sqoop must fetch at a time. Default is 1000.
Increase the value of the fetch-size argument based on the volume of data that need to read. Set the value based on the available memory and bandwidth.

Split-By:
Specifies the column name based on which Sqoop must split the work units.
Use the following syntax:
--split-by <column name>
sqoop import   --connect
<<JDBC URL>>   --username
<<SQOOP_USER_NAME>>   --password
<<SQOOP_PASSWORD>>   --query <<QUERY>>
  --split-by <<ID>>

Using num-mappers:
Specifies number of map tasks that can run in parallel. Default is 4. 
To optimize performance, set the number of map tasks to a value lower than the maximum number of connections that the database supports.
Use the parameter --num-mappers if you want Sqoop to use a different number of mappers. For example, to suggest 10 concurrent tasks, use the following Sqoop command:
sqoop import   --connect
jdbc:mysql://mysql.example.com/sqoop   --username
sqoop   --password
sqoop   --table
cities   --num-mappers 10
Controlling the amount of parallelism that Sqoop will use to transfer data is the main way to control the load on your database. Using more mappers will lead to a higher number of concurrent data transfer tasks, which can result in faster job completion. However, it will also increase the load on the database as Sqoop will execute more concurrent queries.
